import numpy as np
import torch
import torch.nn as nn

class MakeFullyConnected():

    
    def __init__(self, FC_param, bias_def):
        
        super(MakeFullyConnected, self).__init__()
        
        #FC_param = np.array([[3,4],[4,3],[3,8]]) [input,output],[input,output]...
        #bias_def = True

        self.layers = [] 
        for fc in FC_param:
                self.layers += [nn.Linear(v[0], v[1], bias=bias_def)]
                self.layers += [nn.ReLU()]        
        self.layers += [nn.Softmax(dim=1)]
        
        self.classifier = nn.Sequential(*self.layers)
    
    def forward(self, data):
                
        return self.classifier(data)




