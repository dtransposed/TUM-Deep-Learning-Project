import torch
import numpy as np
import VideoDataLoader as VDL
import PretrainedCNN
import PredictionHead as PH
import VideoSolver as VS
import VideoClassifier as VC
import glob
from matplotlib import pyplot as plt


# Defining hyperparameters
epochs = 2
learning_rate_classifier = 0.001
learning_rate_CNN = 0.000001
output_classes = 3

####################################################################################################
# train_files = np.array(glob.glob('huge_dataset_trunc*p'))
# val_files = []
# 
# K = train_files.size
# 
# for i in range(0,int(K/4)):
#     index = np.random.randint(0, train_files.size)
#     val_files.append(train_files[index])
#     train_files = np.delete(train_files,index)
#     
# val_files = np.array(val_files)
# 
# train_loader = VDL.iterate_videos_from_pickle(train_files, normalize=True, use_first_hundred=True)
# val_loader = VDL.iterate_videos_from_pickle(val_files, normalize=True, use_first_hundred=True)
####################################################################################################

path = '/home/peternagy96/Downloads/Frames_for _Damian'

data = VDL.load_videos(path, resize_images=False, huge_data=False)

train_loader = VDL.iterate_videos(data)
val_loader = VDL.iterate_videos(data)

# define the network that is being used for prediction
pred_head = PH.ThreeLayerFCN([25088,256,output_classes])
 
#Get fully convolutional network for feature extraction on frame level
pretrained_model = PretrainedCNN.Fully_Conv_Block('vgg11')
 
video_classifier = VC.VideoClassifier(pretrained_model, 'average', pred_head)

optimizer_Classifier = torch.optim.SGD(pred_head.parameters(), lr=learning_rate_classifier, momentum=0.9)
optimizer_CNN = torch.optim.SGD(pretrained_model.parameters(), lr=learning_rate_CNN, momentum=0.9)
 
solver = VS.VideoSolver(optim_CNN=optimizer_CNN, optim_Classifier=optimizer_Classifier)
 
pred_hist, loss_hist = solver.train(video_classifier, train_loader, val_loader, num_epochs=epochs)

plt.figure()
plt.plot(loss_hist)
plt.show()



plt.figure()
plt.plot(pred_hist)
plt.show()
