'''! party07 !'''

import torch
from torch.autograd import Variable

class Solver(object):
    default_adam_args = {"lr": 1e-4,
                         "betas": (0.9, 0.999),
                         "eps": 1e-8,
                         "weight_decay": 0.0}

    def __init__(self, optim=torch.optim.Adam, optim_args={},
                 loss_func=torch.nn.CrossEntropyLoss()):
        optim_args_merged = self.default_adam_args.copy()
        optim_args_merged.update(optim_args)
        self.optim_args = optim_args_merged
        self.optim = optim
        self.loss_func = loss_func

        self._reset_histories()

    def _reset_histories(self):
        """
        Resets train and val histories for the accuracy and the loss.
        """
        self.train_loss_history = []
        self.train_acc_history = []
        self.val_acc_history = []
        self.val_loss_history = []

    def train(self, model, train_dataloader, val_dataloader, epochs=10, log_nth=0):

        if torch.cuda.is_available():
            model.cuda()

        loss_history = []
        pred_scores_history = []

        for i in range(1,epochs):
            for j, (inputs, targets) in enumerate(train_dataloader):

                inputs = Variable(inputs)
                targets = Variable(targets)
                if torch.cuda.is_available():
                    inputs = inputs.cuda()
                    targets = targets.cuda()

                self.optim.zero_grad()
                outputs = model(inputs)

                loss_func=torch.nn.CrossEntropyLoss()

                loss = loss_func(outputs,targets)
                loss.backward()
                
                self.optim.step()

            pred_scores = []
            for i, (inputs, targets) in enumerate(val_dataloader):
                inputs = Variable(inputs)
                targets = Variable(targets)

                if torch.cuda.is_available():
                    inputs = inputs.cuda()
                    targets = targets.cuda()

                outputs = pred_head(inputs)
                _, preds = torch.max(outputs,1)

                scores = (preds.cpu() == targets.cpu()).data.numpy()

                pred_scores.append(scores)

            pred_scores_history.append(np.mean(pred_scores))
            print(np.mean(pred_scores))
            
        return pred_scores_history
