import os
import glob
from PIL import Image
import numpy as np
from skimage.transform import resize

def iterate_videos(data, batchsize=1):
    # This is a generator function. It iterates over the data
    # and returns the frames of one video at a time with each call.
    # To-Do: implement batchsize
    
    i = 0
    index = 0
    N = data['targets'].shape[0]
    while True:
        
        yield data['data'][index:index+data['video_frames'][i]], data['targets'][i]
        
        index += data['video_frames'][i]
        i += 1
        i = i % N
        if i==0:
            index = 0


def load_videos(path,resize_images=False):
    # This function loads the data which is given in folder structure into a torch.FloatTensor .
    # Optionally the images are resized to a fourth of the original size
    # It returns a dictionary with the data, targets and number frames for each video.
    
    classes = np.array([])
    data = np.array([])
    targets = np.array([])
    video_frames = np.array([])
    
    i=0
    for class_dir in os.listdir(path):
        
        current_class_dir = path + '\\' + class_dir
        
        for ren_dir in os.listdir(current_class_dir):
            
            current_ren_dir = current_class_dir + '\\' + ren_dir
            
            for video_dir in os.listdir(current_ren_dir):
                
                current_video_dir = current_ren_dir + '\\' + video_dir + '\\'
                relative_video_dir = current_video_dir.replace(os.getcwd()+'\\',"")
                
                if '[' in relative_video_dir or ']' in relative_video_dir:
                    relative_video_dir_new = relative_video_dir.replace('[', '')
                    relative_video_dir_new = relative_video_dir.replace(']', '')
                
                img_list = glob.glob(relative_video_dir + '*.jpg')
                
                if len(img_list) > 0:
                    
                    img_shape = np.array(Image.open(img_list[0])).shape
                    
                    targets = np.append(targets,int(class_dir[6])-1).astype(int)
                    
                    if resize_images:
                        vid_np = np.array([resize(np.array(Image.open(img)), (int(img_shape[0]/4),int(img_shape[1]/4),int(img_shape[2])),preserve_range = True) for img in img_list])
                    else:
                        vid_np = np.array([np.array(Image.open(img)) for img in img_list])
                        
                    if i == 0:
                        data = vid_np
                    else:
                        data = np.concatenate((data,vid_np),axis=0)
                    
                    video_frames = np.append(video_frames,vid_np.shape[0]).astype(int)
                    
                    i+=1
    
    dict = {
        'data': data,
        'targets': targets,
        'video_frames': video_frames
        }
        
    return dict